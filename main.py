from tkinter import *
from tkinter import filedialog
from PIL import Image, ImageTk
import cv2
import numpy as np
from rsa import generate_keys, encrypt_to_binary, decrypt_from_binary, embed_text_lsb, extract_text_lsb

# === GIAO DI·ªÜN ===
window = Tk()
window.title("·ª®ng d·ª•ng gi·∫•u tin trong ·∫£nh b·∫±ng LSB k·∫øt h·ª£p m√£ h√≥a RSA")
selected_image_path = None
image_array = None
binary_data = ''
private_key = None
public_key = None

preview_label = None
result_image_label = None

def upload_image():
    global selected_image_path, image_array, preview_label
    filepath = filedialog.askopenfilename(title="Ch·ªçn ·∫£nh ƒë·ªÉ gi·∫•u tin", filetypes=[("Image files", "*.png *.bmp")])
    if filepath:
        selected_image_path = filepath
        pil_img = Image.open(filepath).convert("RGB")
        image_array = np.array(pil_img)

        pil_img.thumbnail((300, 300))
        img_tk = ImageTk.PhotoImage(pil_img)
        if preview_label:
            preview_label.config(image=img_tk)
            preview_label.image = img_tk
        else:
            preview_label = Label(window, image=img_tk)
            preview_label.image = img_tk
            preview_label.grid(column=2, row=2, rowspan=10, padx=20, pady=10)

def create_keys():
    global private_key, public_key
    public_key, private_key = generate_keys(bits=16)  # d√πng 16 bit ƒë·ªÉ thao t√°c nhanh
    pub_key.delete('1.0', END)
    pri_key.delete('1.0', END)
    pub_key.insert(END, str(public_key))
    pri_key.insert(END, str(private_key))

def encrypt_text():
    global binary_data
    message = Initialtxt.get()
    if not message or not public_key:
        return
    binary_data = encrypt_to_binary(message, public_key)
    RESULT_ENCODE.delete(0, END)
    RESULT_ENCODE.insert(END, binary_data)

def decrypt_text():
    global binary_data
    if not binary_data or not private_key:
        return
    try:
        decrypted = decrypt_from_binary(binary_data, private_key)
        RESULT_DECODE.delete(0, END)
        RESULT_DECODE.insert(END, decrypted)
    except Exception as e:
        RESULT_DECODE.delete(0, END)
        RESULT_DECODE.insert(END, f"L·ªói: {e}")

def embed_data():
    global binary_data, image_array, result_image_label
    if image_array is None or not binary_data:
        status_label.config(text="‚ùå Ch∆∞a c√≥ ·∫£nh ho·∫∑c d·ªØ li·ªáu ƒë·ªÉ ch√®n", fg="red")
        return
    try:
        modified = embed_text_lsb(image_array.copy(), binary_data)
        cv2.imwrite('result.png', cv2.cvtColor(modified, cv2.COLOR_RGB2BGR))
        status_label.config(text="‚úÖ ƒê√£ gi·∫•u tin v√†o ·∫£nh result.png", fg="green")
        RESULT_ENCODE.insert(END, " | ‚úÖ")

        # Hi·ªÉn th·ªã ·∫£nh k·∫øt qu·∫£
        pil_result = Image.fromarray(modified)
        pil_result.thumbnail((300, 300))
        result_imgtk = ImageTk.PhotoImage(pil_result)

        if result_image_label:
            result_image_label.config(image=result_imgtk)
            result_image_label.image = result_imgtk
        else:
            result_image_label = Label(window, image=result_imgtk)
            result_image_label.image = result_imgtk
            result_image_label.grid(column=2, row=13, padx=20, pady=10)

    except Exception as e:
        status_label.config(text=f"‚ùå L·ªói khi gi·∫•u tin: {e}", fg="red")
        RESULT_ENCODE.insert(END, f" | ‚ùå L·ªói: {e}")

def extract_and_decrypt():
    global private_key
    if image_array is None or not private_key:
        return
    try:
        result_img = cv2.cvtColor(cv2.imread('result.png'), cv2.COLOR_BGR2RGB)
        recovered = extract_text_lsb(result_img, len(binary_data))
        decrypted = decrypt_from_binary(recovered, private_key)
        RESULT_DECODE.delete(0, END)
        RESULT_DECODE.insert(END, decrypted)
    except Exception as e:
        RESULT_DECODE.delete(0, END)
        RESULT_DECODE.insert(END, f"‚ùå L·ªói: {e}")

# === GIAO DI·ªÜN TH√ÄNH PH·∫¶N ===
Label(window, text="üîê RSA + üñºÔ∏è LSB Steganography", font=("Arial Bold", 22), fg="blue").grid(column=1, row=0, pady=10)
Label(window, text="Gi·∫•u tin an to√†n b·∫±ng k·ªπ thu·∫≠t m√£ h√≥a & ·∫©n tin", font=("Arial Italic", 14)).grid(column=1, row=1)

Label(window, text="1. Nh·∫≠p vƒÉn b·∫£n g·ªëc", font=("Arial", 14)).grid(column=0, row=2, sticky=W)
Initialtxt = Entry(window, width=100)
Initialtxt.grid(column=1, row=2, padx=10, pady=5)

Label(window, text="2. K·∫øt qu·∫£ sau m√£ h√≥a RSA (nh·ªã ph√¢n)", font=("Arial", 14)).grid(column=0, row=3, sticky=W)
RESULT_ENCODE = Entry(window, width=100)
RESULT_ENCODE.grid(column=1, row=3, padx=10, pady=5)

Label(window, text="3. K·∫øt qu·∫£ sau gi·∫£i m√£ RSA", font=("Arial", 14)).grid(column=0, row=4, sticky=W)
RESULT_DECODE = Entry(window, width=100)
RESULT_DECODE.grid(column=1, row=4, padx=10, pady=5)

status_label = Label(window, text="Ch∆∞a th·ª±c hi·ªán gi·∫•u tin", font=("Arial", 12), fg="gray")
status_label.grid(column=2, row=1, padx=10, pady=5)

Label(window, text="Kh√≥a c√° nh√¢n (Private Key)", font=("Arial", 13)).grid(column=0, row=5, sticky=W)
pri_key = Text(window, width=75, height=5)
pri_key.grid(column=1, row=5, padx=10, pady=5)

Label(window, text="Kh√≥a c√¥ng khai (Public Key)", font=("Arial", 13)).grid(column=0, row=6, sticky=W)
pub_key = Text(window, width=75, height=5)
pub_key.grid(column=1, row=6, padx=10, pady=5)

Button(window, text="üîë T·∫°o kh√≥a RSA", width=25, command=create_keys).grid(column=1, row=7, pady=5)
Button(window, text="üîê M√£ h√≥a b·∫±ng RSA", width=25, command=encrypt_text).grid(column=1, row=8, pady=5)
Button(window, text="üîì Gi·∫£i m√£ b·∫±ng RSA", width=25, command=decrypt_text).grid(column=1, row=9, pady=5)

Button(window, text="üì§ Ch·ªçn ·∫£nh (PNG/BMP)", width=35, command=upload_image).grid(column=1, row=10, pady=5)
Button(window, text="üì• Gi·∫•u d·ªØ li·ªáu ƒë√£ m√£ h√≥a v√†o ·∫£nh", width=35, command=embed_data).grid(column=1, row=11, pady=5)
Button(window, text="üì§ Tr√≠ch xu·∫•t & gi·∫£i m√£ d·ªØ li·ªáu t·ª´ ·∫£nh", width=35, command=extract_and_decrypt).grid(column=1, row=12, pady=5)

window.geometry('1300x800')
window.mainloop()
